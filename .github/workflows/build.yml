name: üõ†Ô∏è Builds
on:
  push:
  pull_request:
  workflow_dispatch:
#  push:
#    tags:
#      - 'v*.*.*'

env:
  GODOT_EXE_LINK: https://downloads.tuxfamily.org/godotengine/4.0/beta15/Godot_v4.0-beta15_linux.x86_64.zip
  GODOT_TEMPLATES_LINK: https://downloads.tuxfamily.org/godotengine/4.0/beta15/Godot_v4.0-beta15_export_templates.tpz
  GODOT_EXE: Godot_v4.0-beta15_linux.x86_64
  GODOT_TEMPLATES: Godot_v4.0-beta15_export_templates.tpz

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: linux-debug
            name: Linux Debug
            runner: ubuntu-latest
            target: template_debug
            platform: linux
            arch: x86_64
          - identifier: linux-release
            name: Linux Release
            runner: ubuntu-latest
            target: template_release
            platform: linux
            arch: x86_64
            export_preset: Linux/X11
            export_filename: godot-wordle.x86_64
          - identifier: windows-debug
            name: Windows Debug
            runner: ubuntu-latest
            target: template_debug
            platform: windows
            arch: x86_64
          - identifier: windows-release
            name: Windows Release
            runner: ubuntu-latest
            target: template_release
            platform: windows
            arch: x86_64
            export_preset: Windows Desktop
            export_filename: godot-wordle.exe

    steps:
      - name: (Windows) Set up MinGW
        if: ${{ startsWith(matrix.identifier, 'windows-') }}
        uses: egor-tensin/setup-mingw@v2

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: (Linux) Set up Pulse Audio and ALSA
        if: ${{ startsWith(matrix.identifier, 'linux-') }}
        shell: sh
        run: |
          sudo apt-get install libpulse-dev libasound2-dev

      - name: Set up SCons
        shell: sh
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: (Linux) Compile libsm64
        if: ${{ startsWith(matrix.identifier, 'linux-') }}
        shell: sh
        run: |
          cd extension/libsm64
          make -j`nproc`
          cd ../..
          mkdir -p addons/libsm64-godot/extension/bin
          cp extension/libsm64/dist/* addons/libsm64-godot/extension/bin/ | true

      - name: (Windows) Compile libsm64
        if: ${{ startsWith(matrix.identifier, 'windows-') }}
        shell: sh
        run: |
          cd extension/libsm64
          make -j`nproc` OS=Windows_NT
          cd ../..
          mkdir -p addons/libsm64-godot/extension/bin
          cp extension/libsm64/dist/* addons/libsm64-godot/extension/bin/ | true

      - name: Compile extension
        shell: sh
        run: |
          cd extension
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}' use_mingw=yes
          cd ..

      - name: Clean extra files
        shell: sh
        run: |
          rm -rf extension
          rm -rf .git
          rm -rf .github
          rm -rf .vscode
          rm .gitmodules
          rm .gitignore
          rm .gitattributes

      - name: Copy extra files to addon
        shell: sh
        run: |
          for addon in ${{ github.workspace }}/addons/libsm64-godot/; do
            cp --no-clobber '${{ github.workspace }}/README.md' '${{ github.workspace }}/LICENSE' "$addon"
          done

      - name: Upload demo project
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-project.${{ github.ref_name }}
          path: ${{ github.workspace }}

      - name: Upload addon
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-addon.${{ github.ref_name }}
          path: ${{ github.workspace }}/addons

#      - name: (Release only) Setup demo export
#        if: ${{ endsWith(matrix.identifier, '-release') }}
#        shell: sh
#        run: |
#          wget -nv ${GODOT_EXE_LINK}
#          unzip ${GODOT_EXE}
#          wget -nv ${GODOT_TEMPLATES_LINK}
#          unzip ${GODOT_TEMPLATES}
#          mkdir -v -p ~/.local/share/godot/export_templates
#          mv templates/* ~/.local/share/godot/export_templates
#
#      - name: (Release only) Export demo
#        if: ${{ endsWith(matrix.identifier, '-release') }}
#        shell: sh
#        run: |
#          mkdir -v -p export/${{ matrix.platform }}
#          ./${GODOT_EXE} -v --headless --export-release "${{ matrix.export_preset }}" export/${{ matrix.platform }}/${{ matrix.export_filename }}
#
#      - name: (Release only) Upload demo
#        if: ${{ endsWith(matrix.identifier, '-release') }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ github.event.repository.name }}.${{ github.ref_name }}.${{ matrix.platform }}
#          path: export/${{ matrix.platform }}
