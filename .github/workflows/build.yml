name: 🛠️ Builds

on:
  push:
    paths:
      - extension/**
      - .github/workflows/**
  pull_request:
  workflow_dispatch:

jobs:
  sanitize_ref_name:
    name: Sanitize "ref_name"
    runs-on: ubuntu-latest
    outputs:
      sanitized_ref_name: ${{ steps.sanitize_github_ref_name.outputs.new_ref_name }}
    steps:
      - name: Sanitize "github.ref_name"
        id: sanitize_github_ref_name
        env:
          github_ref_name: ${{ github.ref_name }}
        run: |
          SANITIZED_REF_NAME=$(echo -n "${{ env.github_ref_name }}" | tr "/" "-")
          echo "Sanitized ref_name: $SANITIZED_REF_NAME"
          echo "new_ref_name=$SANITIZED_REF_NAME" >> $GITHUB_OUTPUT;

  build-gdextension:
    name: Build GDExtension files for ${{ matrix.name }}
    needs: sanitize_ref_name
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux (debug)
            target: template_debug
            platform: linux
            arch: x86_64
            os: ubuntu-latest
          - name: 🐧 Linux (release)
            target: template_release
            platform: linux
            arch: x86_64
            os: ubuntu-latest
          - name: 🏁 Windows (debug)
            target: template_debug
            platform: windows
            arch: x86_64
            os: ubuntu-latest
          - name: 🏁 Windows (release)
            target: template_release
            platform: windows
            arch: x86_64
            os: ubuntu-latest
          - name: 🍎 macOS (debug)
            target: template_debug
            platform: macos
            arch: universal
            os: macos-latest
          - name: 🍎 macOS (release)
            target: template_release
            platform: macos
            arch: universal
            os: macos-latest
    runs-on: ${{ matrix.os }}
    env:
      ref_name: ${{ needs.sanitize_ref_name.outputs.sanitized_ref_name }}
      SCONS_CACHE: ${{ github.workspace }}/extension/.scons-cache/
    steps:
      - name: (Windows) Set up MinGW
        if: ${{ matrix.platform == 'windows' }}
        uses: egor-tensin/setup-mingw@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up SCons
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get godot-cpp SHA
        id: godot_cpp_sha
        run: |
          echo "sha=$(git rev-parse @:./extension/godot-cpp)" >> $GITHUB_OUTPUT

      - name: Restore .scons_cache directory
        id: scons_cache_restore
        uses: actions/cache/restore@v4
        with:
          path: ${{env.SCONS_CACHE}}
          key: ${{github.job}}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-${{steps.godot_cpp_sha.outputs.sha}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-${{steps.godot_cpp_sha.outputs.sha}}-${{github.ref}}
            ${{github.job}}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}-${{steps.godot_cpp_sha.outputs.sha}}

      - name: (Windows) Prepare cross compilation
        if: ${{ matrix.platform == 'windows' }}
        run: |
          echo "OS=Windows_NT" >> $GITHUB_ENV

      - name: Compile libsm64
        run: |
          cd extension/libsm64
          cc --version
          make -j $(nproc 2>/dev/null || sysctl -n hw.ncpu)

      - name: Copy libsm64 binary
        run: |
          mkdir -p addons/libsm64_godot/extension/bin
          cp extension/libsm64/dist/* addons/libsm64_godot/extension/bin/ | true

      - name: Compile extension
        run: |
          cd extension
          scons target=${{ matrix.target }} platform=${{ matrix.platform }} arch=${{ matrix.arch }} use_mingw=yes

      - name: (macOS) Resolve liniking
        if: ${{ matrix.platform == 'macos' }}
        run: |
          cd addons/libsm64_godot/extension/bin

          mkdir libsm64.framework
          mv libsm64.dylib libsm64.framework/libsm64

          function fix_id() {
              local library_name=$1

              lipo "${library_name}.framework/${library_name}" -thin arm64 -output "${library_name}-arm64"
              lipo "${library_name}.framework/${library_name}" -thin x86_64 -output "${library_name}-x86_64"
              install_name_tool -id "@rpath/${library_name}.framework/${library_name}" "${library_name}-arm64"
              install_name_tool -id "@rpath/${library_name}.framework/${library_name}" "${library_name}-x86_64"
              lipo -create -output "${library_name}.framework/${library_name}" "${library_name}-arm64" "${library_name}-x86_64"
              rm "${library_name}-arm64" "${library_name}-x86_64"
          }

          fix_id libsm64
          fix_id libsm64gd.macos.${{ matrix.target }}

          function solve_libsm64_load() {
              local library_name=$1

              lipo "${library_name}.framework/${library_name}" -thin arm64 -output "${library_name}-arm64"
              lipo "${library_name}.framework/${library_name}" -thin x86_64 -output "${library_name}-x86_64"
              install_name_tool -change "dist/libsm64.dylib.arm64" "@rpath/libsm64.framework/libsm64" "${library_name}-arm64"
              install_name_tool -change "dist/libsm64.dylib.x86_64" "@rpath/libsm64.framework/libsm64" "${library_name}-x86_64"
              lipo -create -output "${library_name}.framework/${library_name}" "${library_name}-arm64" "${library_name}-x86_64"
              rm "${library_name}-arm64" "${library_name}-x86_64"
          }

          solve_libsm64_load libsm64gd.macos.${{ matrix.target }}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-gdextension.${{ env.ref_name }}.${{ matrix.platform }}.${{ matrix.target }}
          path: ${{ github.workspace }}/addons/libsm64_godot/extension/bin

      - name: Save .scons_cache directory
        uses: actions/cache/save@v4
        with:
          path: ${{env.SCONS_CACHE}}
          key: ${{steps.scons_cache_restore.outputs.cache-primary-key}}

  output-artifacts:
    name: Build the addon, project and export demo
    needs: [sanitize_ref_name, build-gdextension]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      ref_name: ${{ needs.sanitize_ref_name.outputs.sanitized_ref_name }}
      release_name: ${{ github.event.repository.name }}.${{ needs.sanitize_ref_name.outputs.sanitized_ref_name }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Download GDExtension binaries
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ github.event.repository.name }}-gdextension.${{ env.ref_name }}*
          path: ${{ github.workspace }}/addons/libsm64_godot/extension/bin
          merge-multiple: true

      - name: Install Wine
        id: wine_install
        run: |
          sudo apt update && sudo apt install wine64
          echo "wine_path=$(which wine64)" >> $GITHUB_OUTPUT

      - name: Export demo
        id: demo_export
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz
          relative_project_path: ./
          archive_output: true
          cache: true
          wine_path: ${{ steps.wine_install.outputs.wine_path }}

      - name: Upload Windows demo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-demo.${{ env.ref_name }}.windows
          path: ${{ steps.demo_export.outputs.build_directory }}/Windows Desktop

      - name: Upload Linux demo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-demo.${{ env.ref_name }}.linux
          path: ${{ steps.demo_export.outputs.build_directory }}/LinuxX11

      - name: Upload macOS demo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-demo.${{ env.ref_name }}.macos
          path: ${{ steps.demo_export.outputs.build_directory }}/macOS

      - name: Rename archives
        run: |
          cd ${{ steps.demo_export.outputs.archive_directory }}
          mv "Windows Desktop.zip" "${{ github.event.repository.name }}-demo.${{ env.ref_name }}.windows.zip"
          mv "macOS.zip"           "${{ github.event.repository.name }}-demo.${{ env.ref_name }}.mac.zip"
          mv "LinuxX11.zip"        "${{ github.event.repository.name }}-demo.${{ env.ref_name }}.linux.zip"

      - name: Copy extra files to addon
        run: |
          cp -n '${{ github.workspace }}/LICENSE' '${{ github.workspace }}/addons/libsm64_godot/'

      - name: Make release zip
        run: |
          mkdir ${{ env.release_name }}
          cp -r addons ${{ env.release_name }}
          cp -r libsm64_godot_demo ${{ env.release_name }}
          7z a -tzip ${{ env.release_name }}.zip ${{ env.release_name }}

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.release_name }}.zip
          path: ${{ env.release_name }}.zip

      - name: Make release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          body: See [CHANGES.md](https://github.com/Brawmario/libsm64-godot/blob/master/CHANGES.md) for details.
          files: |
            ${{ env.release_name }}.zip
            ${{ steps.demo_export.outputs.archive_directory }}/*
