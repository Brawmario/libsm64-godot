name: üõ†Ô∏è Builds
on:
  push:
  pull_request:
  workflow_dispatch:
#  push:
#    tags:
#      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: linux-debug
            name: Linux Debug
            runner: ubuntu-latest
            target: template_debug
            platform: linux
            arch: x86_64
          - identifier: linux-release
            name: Linux Release
            runner: ubuntu-latest
            target: template_release
            platform: linux
            arch: x86_64
            export_preset: Linux/X11
            export_filename: godot-wordle.x86_64
          - identifier: windows-debug
            name: Windows Debug
            runner: ubuntu-latest
            target: template_debug
            platform: windows
            arch: x86_64
          - identifier: windows-release
            name: Windows Release
            runner: ubuntu-latest
            target: template_release
            platform: windows
            arch: x86_64
            export_preset: Windows Desktop
            export_filename: godot-wordle.exe

    steps:
      - name: (Windows) Set up MinGW
        if: ${{ startsWith(matrix.identifier, 'windows-') }}
        uses: egor-tensin/setup-mingw@v2

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: (Linux) Set up Pulse Audio and ALSA
        if: ${{ startsWith(matrix.identifier, 'linux-') }}
        shell: sh
        run: |
          sudo apt-get install libpulse-dev libasound2-dev

      - name: Set up SCons
        shell: sh
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: (Windows) Patch libsm64
        if: ${{ startsWith(matrix.identifier, 'windows-') }}
        shell: sh
        run: |
          patch extension/libsm64/Makefile < extension/libsm64winmake.patch

      - name: (Linux) Patch libsm64
        if: ${{ startsWith(matrix.identifier, 'linux-') }}
        shell: sh
        run: |
          patch extension/libsm64/src/decomp/pc/audio/audio_pulse.c < extension/libsm64linux.patch

      - name: Compile libsm64
        shell: sh
        run: |
          cd extension/libsm64
          make -j`nproc`
          cd ../..
          mkdir -p addons/libsm64-godot/extension/bin
          cp extension/libsm64/dist/* addons/libsm64-godot/extension/bin/ | true

      - name: Compile extension
        shell: sh
        run: |
          cd extension
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}' use_mingw=yes
          cd ..

      - name: Clean extra files
        shell: sh
        run: |
          rm -rf extension
          rm -rf .git
          rm -rf .github
          rm -rf .vscode
          rm .gitmodules
          rm .gitignore
          rm .gitattributes

      - name: Copy extra files to addon
        shell: sh
        run: |
          for addon in ${{ github.workspace }}/addons/libsm64-godot/; do
            cp --no-clobber '${{ github.workspace }}/README.md' '${{ github.workspace }}/LICENSE' "$addon"
          done

      - name: Upload demo project
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-project
          path: ${{ github.workspace }}

      - name: Upload addon
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-addon
          path: ${{ github.workspace }}/addons/${{ github.event.repository.name }}

      - name: Export demo
        # Only one matrix needs to run this
        if: matrix.identifier == 'linux-release'
        id: export
        uses: firebelley/godot-export@v4.6.0
        with:
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta15/Godot_v4.0-beta15_linux.x86_64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta15/Godot_v4.0-beta15_export_templates.tpz
          relative_project_path: ${{ github.workspace }}
          archive_output: true
          use_godot_4: true

      - name: Upload demo
        # Only one matrix needs to run this
        if: matrix.platform == "linux-release"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-demo.${{ github.ref_name }}.${{ matrix.platform }}
          path: ${{ steps.export.outputs.archive_directory }}
